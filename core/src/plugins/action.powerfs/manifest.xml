<?xml version="1.0" encoding="UTF-8"?>
<ajxp_plugin enabled="false" label="CONF_MESSAGE[Power FS]" description="CONF_MESSAGE[This set of extensions assume that you have an administration access to your server: ability to tweak the webserver and the php configuration, ability to access the command line, etc.]" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:noNamespaceSchemaLocation="file:../core.ajaxplorer/ajxp_registry.xsd">
    <class_definition classname="PowerFSController" filename="plugins/action.powerfs/class.PowerFSController.php"/>
    <client_settings>
        <resources>
            <i18n namespace="powerfs" path="plugins/action.powerfs/i18n"/>
        </resources>
    </client_settings>
    <server_settings>
             <global_param group="Compression tool" name="ZIPPER" type="select" choices="zip|ZIP (1st edition; default),zip2|ZIP (2nd edition),winrar|WinRAR (only Windows),7zip|7-Zip,other|other (enter command in field below)" label="Tool"
             	description="Select zip tool" default="zip"/>
             <global_param group="Compression tool" name="ZIPPER_MAN" type="string" label="Other execution file" 
             	description="Execution file of other tool" default=""/>
             <global_param group="Compression tool" name="ZIPPER_PATH" type="string" label="Path" description="Path to the tool, if not in PATH variable" default=""/>
             <global_param group="Compression tool" name="MAX_ZIP_TIME_FILE" type="integer" label="Max file zip time (seconds)" 
             	description="Maximum time, which is given to process one file to zip" default="120"/>
             <global_param group="Compression tool" name="MAX_ZIP_TIME" type="integer" label="Max zip time (seconds)" 
             	description="Maximum time, after which the zip process is stopped / terminated; must be smaller than max exe time" default="1200"/>
             <global_param group="Progress monitoring" name="ZIPPER_MONITOR" type="select" choices="clioutput|CLI output,fileoutput|File as output,avgspeed|Average speed" label="Type"
             	description="Select the monitoring process, not available for zip (1st edition), CLI output available for zip (2nd edition), file as output available for WinRAR, average speed always works" default="zip"/>
             <global_param group="Progress monitoring" name="ZIPPER_MONITOR_PAUSE" type="integer" label="Pause between checks (milliseconds)"
             	description="Pause between each progress checking activity of the monitor" default="1000"/>
             <global_param group="Progress monitoring" name="ZIPPER_MONITOR_RECOG_PATTERN" type="string" label="Recognition pattern"
             	description="Pattern to be fullfilled, when file is processed; %file% will be replaced by filename to be searched" default=""/>
             <global_param group="Progress monitoring" name="ZIPPER_MONITOR_RECOG_AFFECTS" type="select" choices="start|zipping of file starts,end|zipping of file has been finished" label="Recognition is when"
             	description="When does the recognition pattern return true" default="end"/>
             <global_param group="Progress monitoring" name="ZIPPER_MONITOR_SUCCESS_STATEMENT" type="string" label="Success statement"
             	description="String which is in the output, when Zip process was successful, like 'Everything is Ok' for 7-zip" default=""/>
             <global_param group="General options" name="MAX_EXE_TIME" type="integer" label="Max exe time (seconds)" 
             	description="Maximum time, after which the cmd line process is stopped" default="1400"/>
    </server_settings>
    <registry_contributions>
        <actions>
            <!-- Override access.fs compression -->
            <action name="compress">
                <processing>
                    <serverCallback methodName="switchAction"/>
                </processing>
            </action>
            <action name="precompress">
                <rightsContext noUser="true" userLogged="only" read="true" write="false" adminOnly=""></rightsContext>
                <processing>
                    <serverCallback methodName="switchAction"/>
                </processing>
            </action>
            <action name="postcompress_download">
                <rightsContext noUser="true" userLogged="only" read="true" write="false" adminOnly=""></rightsContext>
                <processing>
                    <serverCallback methodName="switchAction"/>
                </processing>
            </action>
            <action name="monitor_compression">
                <processing>
                    <serverCallback methodName="switchAction"/>
                </processing>
            </action>
            <!-- Override download client callback -->
            <action name="download">
                <processing>
                    <clientCallback prepareModal="true"><![CDATA[
                        var userSelection = ajaxplorer.getUserSelection();
                        if((userSelection.isUnique() && !userSelection.hasDir()) || (zipEnabled && multipleFilesDownloadEnabled))
                        {
                            if(gaTrackEvent){
                                fileNames = userSelection.getFileNames();
                                for(var i=0; i<fileNames.length;i++){
                                    gaTrackEvent("Data", "Download", fileNames[i]);
                                }
                            }
                            var agent = navigator.userAgent;
                            if(agent && (agent.indexOf('iPhone')!=-1||agent.indexOf('iPod')!=-1||agent.indexOf('iPad')!=-1||agent.indexOf('iOs')!=-1)){
                                var downloadUrl = ajxpServerAccessPath+'&get_action=download';
                                downloadUrl = userSelection.updateFormOrUrl(null,downloadUrl);
                                document.location.href=downloadUrl;
                            }else{
                                if( !userSelection.isUnique() || userSelection.hasDir() ){

                                    zipName = getBaseName(userSelection.getContextNode().getPath());
                                    if(zipName == "") zipName = "Archive";
                                    var index=1;
                                    var buff = zipName;
                                    while(userSelection.fileNameExists(zipName + ".zip")){
                                        zipName = buff + "-" + index; index ++ ;
                                    }

                                    var conn = new Connexion();
                                    conn.addParameter("get_action", "precompress");
                                    conn.addParameter("archive_name", zipName+".zip");
                                    conn.addParameter("on_end", "postcompress_download");
                                    var selected = userSelection.getFileNames();
                                    var dir = userSelection.getContextNode().getPath();
                                    for(var i=0;i<selected.length;i++){
                                        conn.addParameter("file_"+i, selected[i]);
                                        dir = getRepName(selected[i]);
                                    }
                                    conn.addParameter("dir", dir);
                                    conn.onComplete = function(transport){
                                        this.parseXmlMessage(transport.responseXML);
                                    }.bind(ajaxplorer.actionBar) ;
                                    conn.sendAsync();

                                }else{
                                    var regex = new RegExp('.*?[&\\?]' + 'minisite_session' + '=(.*?)&.*');
                                    val = window.ajxpServerAccessPath.replace(regex, "$1");
                                    var minisite_session = ( val == window.ajxpServerAccessPath ? false : val );

                                    $('download_form').action = window.ajxpServerAccessPath;
                                    $('download_form').secure_token.value = Connexion.SECURE_TOKEN;
                                    $('download_form').select("input").each(function(input){
                                        if(input.name!='get_action' && input.name!='secure_token') input.remove();
                                        if(input.name=='get_action') input.value = 'download';
                                    });
                                    if(minisite_session){
                                        $('download_form').insert(new Element('input', {type:'hidden', name:'minisite_session', value:minisite_session}));
                                    }
                                    userSelection.updateFormOrUrl($('download_form'));
                                    $('download_form').submit();
                                }
                            }
                        }
                        else
                        {
                            var loadFunc = function(oForm){
                                var dObject = oForm.getElementsBySelector('div[id="multiple_download_container"]')[0];
                                var downloader = new MultiDownloader(dObject, ajxpServerAccessPath+'&action=download&file=');
                                downloader.triggerEnd = function(){hideLightBox()};
                                fileNames = userSelection.getFileNames();
                                for(var i=0; i<fileNames.length;i++)
                                {
                                    downloader.addListRow(fileNames[i]);
                                }
                            };
                            var closeFunc = function(){
                                hideLightBox();
                                return false;
                            };
                            modal.showDialogForm('Download Multiple', 'multi_download_form', loadFunc, closeFunc, null, true);
                        }
                        ]]>
                    </clientCallback>
                </processing>
            </action>
        </actions>
    </registry_contributions>
    <dependencies>
       <activePlugin pluginName="access.fs"/>
    </dependencies>
</ajxp_plugin>
